<pre class="metadata">
Title: 通知 API
Group: WHATWG
H1: 通知 API
Shortname: notifications
Status: LS
No Editor: true
Abstract: 该标准定义了一个 API 来给终端用户显示通知，通常显示在顶层浏览上下文视口。
该 API 被设计成与现有的通知系统兼容，但依然是平台独立的。
Logo: https://resources.whatwg.org/logo-notifications.svg
!参与: <a href="https://github.com/whatwg/notifications/issues/new">提交错误报告</a> (<a href="https://github.com/whatwg/notifications/issues">打开错误报告</a>)
!参与: <a href="https://whatwg.org/mailing-list">whatwg@whatwg.org</a> (<a href="https://whatwg.org/mailing-list#specs">存档</a>)
!参与: <a href="http://wiki.whatwg.org/wiki/IRC">IRC: #whatwg on Freenode</a>
!提交: <a href="https://github.com/whatwg/notifications/commits">https://github.com/whatwg/notifications/commits</a>
!提交: <a href="https://twitter.com/notifyapi">@notifyapi</a>
Indent: 2
</pre>

<h2 id=terminology>术语</h2>

<p>本规范中使用的一些术语取自DOM、Fetch、HTML、IDL、URL 和 振动 API 标准。
[[!DOM]]
[[!FETCH]]
[[!HTML]]
[[!WEBIDL]]
[[!URL]]
[[!VIBRATION]]


<h2 id=notifications>通知</h2>

<p><dfn lt="concept notification">通知</dfn>是事件发生的抽象表示，如信息发出。

<p><a lt="concept notification">通知</a>有一个关联的 DOMString 类型的
<dfn lt="concept title">标题</dfn>。

<p><a lt="concept notification">通知</a>有一个关联的 DOMString 类型的
<dfn>主体</dfn>。

<p><a lt="concept notification">通知</a>有一个关联的
<dfn lt="concept direction">方向</dfn>，其值是
<i>auto</i>、<i>ltr</i> 和 <i>rtl</i> 三者之一。

<p><a lt="concept notification">通知</a>有一个关联的 DOMString 类型的
<dfn lt="concept language">语言</dfn>，其值是一个有效的 BCP 47 语言标记或空字符串。

<p><a lt="concept notification">通知</a>有一个关联的 DOMString 类型的
<dfn>标签</dfn>。

<p><a lt="concept notification">通知</a>有一个关联的<dfn>数据</dfn>.

<p><a lt="concept notification">通知</a>有一个关联的
<dfn lt="concept origin">起源</dfn>.

<p><a lt="concept notification">通知</a>有一个关联的未被设置的
<dfn>重通知偏好标志</dfn>。设置该标志表示运行<a>替代步骤</a>后，最终用户会被警告。

<p><a lt="concept notification">通知</a>有一个关联的未被设置的
<dfn>静音偏好标志</dfn>。设置该标志表示不接收声音或者振动通知。

<p><a lt="concept notification">通知</a>有一个关联的未被设置的
<dfn>屏幕关闭偏好标志</dfn>。设置该标志表示设备屏幕不会被启用。

<p><a lt="concept notification">通知</a>有一个关联的未被设置的
<dfn>粘性偏好设置</dfn>。设置该标志表示最终用户将不能很容易地清除
<a lt="concept notification">通知</a>。<span class=note>仅适用于<a>持久通知</a>。

<p><a lt="concept notification">通知</a><em>可以</em>有相关联的
<dfn>图标 URL</dfn>、<dfn>图标资源</dfn>、<dfn>声音 URL</dfn>、
<dfn>声音资源/dfn>、<dfn>振动模式</dfn>以及。

<p class=note>不鼓励开发者通过图标、声音或振动模式来给最终用户传达信息；除非这些信息
是最终用户可以访问的。

<p><dfn>非持久通知</dfn>是没有关联<dfn>服务线程注册</dfn>的
<a lt="concept notification">通知</a>。

<p><dfn>持久通知</dfn>是关联了<dfn>服务线程注册</dfn>的
<a lt="concept notification">通知</a>。

<!-- XXX https://html.spec.whatwg.org/#fingerprinting-vector -->

<hr>

<p>为<dfn>创建通知</dfn>, 给定一个 <var>title</var> 和 <var>options</ar>，执行
这些步骤：

<ol>
  <li><p>设 <var>notification</var> 是一个新的
  <a lt="concept notification">通知</a>.

  <li><p>如果 <var>options</var> 的 <code>silent</code> 为 true, 那么
  <var>options</var> 的 <code>sound</code> 或者 <var>options</var> 的
  <code>vibrate</code> 出现时，<a>抛出</a> <code>TypeError</code> 异常。

  <li><p>如果 <var>options</var> 的 <code>renotify</code> 为 true 并且
  <var>options</var> 的 <code>tag</code> 为空字符串，那么<a>抛出</a>
  <code>TypeError</code> 异常.

  <li><p>设置 <var>notification</var> 的 <a>data</a> 为<a>结构化克隆</a>的
  <var>options</var> 的 <code>data</code>。重新抛出任何异常。

  <li><p>设置 <var>notification</var> 的 <a lt="concept title">title</a>
  为 <var>options</var> 的 <code>title</code>。

  <li><p>设置 <var>notification</var> 的 <a lt="concept direction">direction</a>
  为 <var>options</var> 的 <code>dir</code>。

  <li><p>如果 <var>options</var> 的 <code>lang</code> 是一个有效的 BCP 47 
  语言标记或空字符串, 设置 <var>notification</var> 的
  <a lt="concept language">language</a> 为 <var>options</var> 的
  <code>lang</code>；否则将之设置为空字符串。 [[!LANG]]

  <li><p>设置 <var>notification</var> 的 <a lt="concept origin">origin</a> 为
  <a>入口设置对象</a> 的 <a>origin</a>。

  <li><p>设置 <var>notification</var> 的 <a>主体</a> 为 <var>options</var> 的
  <code>body</code>。

  <li><p>设置 <var>notification</var> 的 <a>tag</a> 为 <var>options</var> 的
  <code>tag</code>。

  <li><p>设 <var>baseURL</var> 为<a>入口设置对象</a>指定的 API 基础 URL。
  <span class=XXX>或现任？</span>

  <li><p>如果 <var>options</var> 存在 <code>icon</code>，使用 <var>baseURL</var>
  来<a lt="url parser">解析</a>之；解析无误时，设置 <var>notification</var> 的
  <a>icon URL</a> 为该解析值。（否则<a>图标 URL</a>未设置。）

  <li><p>如果 <var>options</var> 存在 <code>sound</code>，使用 <var>baseURL</var>
  <a lt="url parser">解析</a> 之； 解析无误时，设置 <var>notification</var> 的
  <a>sound URL</a> 为该解析值。（否则<a>声音 URL</a>未设置。）

  <li><p>如果 <var>options</var> 存在 <code>vibrate</code>，<a>验证并规范化</a>之，
  并设置 <var>notification</var> 的<a>振动模式</a>为该规范化值。
 （否则<a>振动模式</a>未设置。）

  <li><p>如果 <var>options</var> 的 <code>renotify</code> 为 true，设置
  <var>notification</var> 的<a>重通知偏好标志</a>。

  <li><p>如果 <var>options</var> 的 <code>silent</code> 为 true，设置
  <var>notification</var> 的<a>静音偏好标志</a>。

  <li><p>如果 <var>options</var> 的 <code>noscreen</code> 为 true，设置
  <var>notification</var> 的<a>屏幕关闭偏好标志</a>。

  <li><p>如果 <var>options</var> 的 <code>sticky</code> 为 true，设置
  <var>notification</var> 的<a>粘性偏好设置</a>。

  <li><p>返回 <var>notification</var>。
</ol>


<h3 id=lifetime-and-ui-integrations>Lifetime and UI integration</h3>

<p>用户代理必须保留一个由零或多个<a lt="concept notification">通知</a>组成的
<dfn>通知列表</dfn>。

<p>用户代理应该在创建<a>非持久通知</a>之后的几秒种内执行<a>关闭步骤</a>。

<p>用户代理不应该在平台的“通知中心”（如果有的话）显示<a>非持久通知</a>。

<p>用户代理应该保持<a>持久通知</a>，直至被移除出<a>通知列表</a>。

<p class=example>A <a>持久通知</a>可通过其 {{Notification}} 对象来调用
{{close()!!method}} 方法。

<p>用户代理应该在平台的“通知中心”（如果有的话）显示<a>持久通知</a>。


<h3 id=permission-model>许可模式</h3>

<p>当且仅当用户（或用户代理）授予<dfn>许可</dfn>时，才能显示
<a lt="concept notification">通知</a>。为给定<a>起源</a>显示
<a lt="concept notification">通知</a>的<a>许可</a>是下面三个字符串之一：

<dl>
  <dt>"<code>default</code>"
  <dd><p>相当于 "<code>denied</code>"，但用户没有作出明确的选择。

  <dt>"<code>denied</code>"
  <dd><p>意味着用户不希望被<a lt="concept notification">通知</a>。

  <dt>"<code>granted</code>"
  <dd><p>意味着可以显示<a lt="concept notification">通知</a>。
</dl>

<p class=note>"<code>default</code>"从不会等同于"<code>granted</code>"。如果那样
的话，"<code>granted</code>"会被滥用，应用程序再也不必请求<a>许可</a>。


<h3 id=direction>Direction</h3>

<p>This section is written in terms equivalent to those used in the Rendering
section of HTML. [[!HTML]]

<!-- keep this in sync with
     https://html.spec.whatwg.org/multipage/rendering.html#text-rendered-in-native-user-interfaces -->

<p>User agents are expected to honor the Unicode semantics of the text of a
<a lt="concept notification">notification</a>'s
<a lt="concept title">title</a> and <a>body</a>. Each is expected to be
treated as an independent set of one or more bidirectional algorithm paragraphs
when displayed, as defined by the bidirectional algorithm's rules P1, P2, and
P3, including, for instance, supporting the paragraph-breaking behaviour of
U+000A LINE FEED (LF) characters. For each paragraph of the
<a lt="concept title">title</a> and <a>body</a>, the
<a lt="concept notification">notification</a>'s
<a lt="concept direction">direction</a> provides the higher-level override
of rules P2 and P3 if it has a value other than "<code>auto</code>". [[!BIDI]]


<h3 id=language>Language</h3>

<!-- keep this in sync with
     https://html.spec.whatwg.org/multipage/dom.html#attr-lang -->

<p>The <a lt="concept notification">notification</a>'s
<a lt="concept language">language</a> specifies the primary language for the
<a lt="concept notification">notification</a>'s
<a lt="concept title">title</a> and <a>body</a>. Its value is a valid
BCP 47 language tag, or the empty string. The empty string indicates that the
primary language is unknown. [[!LANG]]


<h3 id=resources>Resources</h3>

<p>The <dfn>fetch steps</dfn> for a given
<a lt="concept notification">notification</a> <var>notification</var> are:

<ol>
  <!-- XXX https://www.w3.org/Bugs/Public/show_bug.cgi?id=24055 -->
  <li><p>If the notification platform supports icons, <a>fetch</a>
  <var>notification</var>'s <a>icon URL</a>, if <a>icon URL</a> is set.

  <p>Then, <a>in parallel</a>:

  <ol>
    <li><p>Wait for the <a>response</a>.

    <li><p>If the <a>response</a>'s <a>internal response</a>'s
    <a lt="response type">type</a> is <i>default</i>, attempt to decode the
    resource as image.

    <li><p>If the image format is supported, set <var>notification</var>'s
    <a>icon resource</a> to the decoded resource. (Otherwise
    <var>notification</var> has no <a>icon resource</a>.)
  </ol>

  <li><p>If the notification platform supports sounds, <a>fetch</a>
  <var>notification</var>'s <a>sound URL</a>, if <a>sound URL</a> is set.

  <p>Then, <a>in parallel</a>:

  <ol>
    <li><p>Wait for the <a>response</a>.

    <li><p>If the <a>response</a>'s <a>internal response</a>'s
    <a lt="response type">type</a> is <i>default</i>, attempt to decode the
    resource as sound.
    <!-- XXX xref -->

    <li><p>If the sound format is supported, set <var>notification</var>'s
    <a>sound resource</a> to the decoded resource. (Otherwise
    <var>notification</var> has no <a>sound resource</a>.)
  </ol>
</ol>


<h3 id=showing-a-notification>Showing a notification</h3>

<p>The <dfn>show steps</dfn> for a given
<a lt="concept notification">notification</a> <var>notification</var> are:

<ol>
  <li><p>If there is a <a lt="concept notification">notification</a> in the
  <a>list of notifications</a> whose <a>tag</a> is not the empty string and
  equals <var>notification</var>'s <a>tag</a>, and whose
  <a lt="concept origin">origin</a> is <a>same origin</a> with
  <var>notification</var>'s <a lt="concept origin">origin</a>, run the
  <a>replace steps</a> for that <a lt="concept notification">notification</a>
  and <var>notification</var>, and then terminate these steps.

  <li><p>Otherwise, run the <a>display steps</a> for <var>notification</var>.
</ol>


<h3 id=activating-a-notification>Activating a notification</h3>

<p>When a <a lt="concept notification">notification</a> <var>notification</var>
is activated by the user, assuming the underlying notification platform supports
activation, the user agent must (unless otherwise specified) run these steps:

<ol>
  <li><p>If <var>notification</var> is a <a>persistent notification</a>, run
  these substeps:

  <ol>
    <li><p>Let <var>callback</var> be an algorithm that when invoked with a
    <var>global</var>, <a lt="fire a service worker notification event named e">
    fires a service worker notification event</a> named
    <code>notificationclick</code> given <var>notification</var> on
    <var>global</var>.

    <li><p>Then run <a>Handle Functional Event</a> with
    <var>notification</var>'s <a>service worker registration</a> and
    <var>callback</var>.
  </ol>

  <li><p>Otherwise, <a>queue a task</a> to run these substeps:

  <ol>
    <li><p><a lt="concept event fire">Fire an event</a> named <code>click</code>
    with its <code> <a lt="dom event cancelable">cancelable</a></code> attribute
    initialized to true on the {{Notification}} object representing
    <var>notification</var>.

    <p class="note">User agents are encouraged to make <code>
    <a lt="dom window focus">window.focus()</a></code> work from within the
    event listener for the event named <code>click</code>.

    <li><p>If the <a lt="concept event">event</a>'s <a>canceled flag</a> is
    unset, the user agent should bring the <var>notification</var>'s related
    <a>browsing context</a>'s viewport into focus.
  </ol>
</ol>

<p class="note">Throughout the web platform "activate" is intentionally
misnamed as "click".


<h3 id=closing-a-notification>Closing a notification</h3>

<p>When a <a lt="concept notification">notification</a> is closed, either by the
underlying notification platform or by the user, the <a>close steps</a> for it
must be run.

<p>The <dfn>close steps</dfn> for a given <var>notification</var> are:

<ol>
  <li><p>If <var>notification</var> is not in the <a>list of notifications</a>,
  terminate these steps.

  <li><p>Remove <var>notification</var> from the <a>list of notifications</a>.
</ol>


<h3 id=displaying-notification>Displaying notifications</h3>

<p>The <dfn>display steps</dfn> for a <var>given notification</var> are:

<ol>
  <li><p>Wait for any <a lt="fetch">fetches</a> to complete and
  <var>notification</var>'s <a>icon resource</a> and <a>sound resource</a>
  to be set (if any).

  <li><p>Display <var>notification</var> on the device (e.g. by calling the
  appropriate notification platform).

  <p>At this point also play <var>notification</var>'s <a>sound resource</a>, if
  any, and run <a>perform vibration</a> using <var>notification</var>'s
  <a>vibration pattern</a>, if any.

  <li><p>Append <var>notification</var> to the <a>list of notifications</a>.
</ol>


<h3 id=replacing-a-notification>Replacing a notification</h3>

<p>The <dfn>replace steps</dfn> for replacing an <var>old</var>
<a lt="concept notification">notification</a> with a <var>new</var> one are:

<ol>
  <li><p>Wait for any <a lt="fetch">fetches</a> to complete and
  <var>notification</var>'s <a>icon resource</a> and <a>sound resource</a> to be
  set (if any).

  <li><p>Replace <var>old</var> with <var>new</var>, in the same position, in
  the <a>list of notifications</a>.

  <p>If the notification platform does not support replacement this requirement
  may be addressed by running the <a>close steps</a> for <var>old</var> and then
  running the <a>display steps</a> for <var>new</var>.

  <p class="note">Notification platforms are strongly encouraged to support
  native replacement. It is much nicer.
</ol>


<h2 id=api>API</h2>

<pre class=idl>
[Constructor(DOMString title, optional NotificationOptions options),
 Exposed=(Window,Worker)]
interface Notification : EventTarget {
  static readonly attribute NotificationPermission permission;
  [Exposed=Window] static void requestPermission(optional NotificationPermissionCallback callback);

  attribute EventHandler onclick;
  attribute EventHandler onerror;

  readonly attribute DOMString title;
  readonly attribute NotificationDirection dir;
  readonly attribute DOMString lang;
  readonly attribute DOMString body;
  readonly attribute DOMString tag;
  readonly attribute USVString icon;
  readonly attribute USVString sound;
  // vibrate not exposed for now; see bug 23682
  readonly attribute boolean renotify;
  readonly attribute boolean silent;
  readonly attribute boolean noscreen;
  readonly attribute boolean sticky;
  [SameObject] readonly attribute any data;

  void close();
};

dictionary NotificationOptions {
  NotificationDirection dir = "auto";
  DOMString lang = "";
  DOMString body = "";
  DOMString tag = "";
  USVString icon;
  USVString sound;
  VibratePattern vibrate;
  boolean renotify = false;
  boolean silent = false;
  boolean noscreen = false;
  boolean sticky = false;
  any data = null;
};

enum NotificationPermission {
  "default",
  "denied",
  "granted"
};

callback NotificationPermissionCallback = void (NotificationPermission permission);

enum NotificationDirection {
  "auto",
  "ltr",
  "rtl"
};
</pre>

<p>A <a>non-persistent notification</a> is represented one {{Notification}}
objects and can be created through {{Notification}}'s
<a href="#dom-notification-notification">constructor</a>.

<p>A <a>persistent notification</a> is represented by zero or more
{{Notification}} objects can be created through the
{{ServiceWorkerRegistration/showNotification()}} method.

<h3 id=garbage-collection>Garbage collection</h3>

<p>A {{Notification}} object must not be garbage collected while its
corresponding <a lt="concept notification">notification</a> is in the
<a>list of notifications</a> and the {{Notification}} object in question has an
<a lt="concept event listener">event listener</a> whose <b>type</b> is
<code>click</code> or <code>error</code>.

<h3 id=constructors>Constructors</h3>

<p>The <dfn constructor dfn-for=Notification><code>Notification(title, options)
</code></dfn> constructor, when invoked, must (unless otherwise indicated) run
these steps:

<ol>
  <li><p>If <var>options</var>'s <code>sticky</code> is present, <a>throw</a>
  a <code>TypeError</code> exception.

  <li><p>If <a>entry settings object</a>'s <a>global object</a> is a
  {{ServiceWorkerGlobalScope}} object, <a>throw</a> a
  <code>TypeError</code> exception.

  <li><p>Let <var>notification</var> be the result of
  <a lt="create a notification">creating a notification</a> given
  <var>title</var> and <var>options</var>. Rethrow any exceptions.

  <li><p>Let <var>n</var> be a new {{Notification}} object associated with
  <var>notification</var>.

  <li><p>Run these substeps <a>in parallel</a>:

  <ol>
    <li><p>If <a>permission</a> for <var>notification</var>'s
    <a lt="concept origin">origin</a> is not "<code>granted</code>",
    <a>queue a task</a> to <a lt="concept event fire">fire an event</a> named
    <code>error</code> on <var>n</var>, and terminate these substeps.

    <li><p>Run the <a>fetch steps</a> for <var>notification</var>.

    <li><p>Run the <a>show steps</a> for <var>notification</var>.
  </ol>

  <li><p>Return <var>n</var>.
</ol>


<h3 id=static-members>Static members</h3>

<p>The static <dfn attribute dfn-for=Notification><code>permission</code></dfn>
attribute's getter must return <a>permission</a> for
<a>entry settings object</a>'s <a>origin</a>.

<p>The static <dfn method dfn-for=Notification><code>requestPermission(callback)
</code></dfn> method, when invoked, must run these steps:

<ol>
  <li><p>Return, but continue running these steps <a>in parallel</a>.

  <li><p>Let <var>permission</var> be <a>permission</a> for
  <a>entry settings object</a>'s <a>origin</a>.

  <li><p>If <var>permission</var> is "<code>default</code>", ask the user
  whether showing notifications for the <a>entry settings object</a>'s
  <a>origin</a> is acceptable. If it is, set permission to
  "<code>granted</code>", and "<code>denied</code>" otherwise.

  <li><p><a>Queue a task</a> to set <a>permission</a> for
  <a>entry settings object</a>'s <a>origin</a> to <var>permission</var> and
  invoke <var>callback</var> with <var>permission</var> as single argument if
  <var>callback</var> is given. If this throws an exception,
  <a>report the exception</a>.
</ol>

<p class="warning">In designing the platform notifications are the one instance
thus far where asking the user upfront makes sense. Specifications for other
APIs should not use this pattern and instead employ one of the
<a href="http://robert.ocallahan.org/2011/06/permissions-for-web-applications_30.html">
many more suitable alternatives</a>.

<h3 id=object-members>Object members</h3>

<p>The following are the <a>event handlers</a> (and their corresponding
<a>event handler event types</a>) that must be supported as attributes by the
{{Notification}} object.

<table>
  <thead>
    <tr>
      <th><a>event handler</a>
      <th><a>event handler event type</a>
 <tbody>
  <tr>
   <td><dfn attribute dfn-for=Notification><code>onclick</code></dfn>
   <td><code>click</code>
  <tr>
   <td><dfn attribute dfn-for=Notification><code>onerror</code></dfn>
   <td><code>error</code>
</table>

<p>The <dfn method dfn-for=Notification><code>close()</code></dfn> method, when
invoked, must run the <a>close steps</a> for the
<a lt="concept notification">notification</a>.

<p>The <dfn attribute dfn-for=Notification><code>title</code></dfn> attribute's
getter must return the <a lt="concept notification">notification</a>'s
<a lt="concept title">title</a>.

<p>The <dfn attribute dfn-for=Notification><code>dir</code></dfn> attribute's
getter must return the <a lt="concept notification">notification</a>'s
<a lt="concept direction">direction</a>.

<p>The <dfn attribute dfn-for=Notification><code>lang</code></dfn> attribute's
getter must return the <a lt="concept notification">notification</a>'s
<a lt="concept language">language</a>.

<p>The <dfn attribute dfn-for=Notification><code>body</code></dfn> attribute's
getter must return the <a lt="concept notification">notification</a>'s
<a>body</a>.

<p>The <dfn attribute dfn-for=Notification><code>tag</code></dfn> attribute's
getter must return the <a lt="concept notification">notification</a>'s <a>tag</a>.

<p>The <dfn attribute dfn-for=Notification><code>icon</code></dfn> attribute's
getter must return the <a lt="concept notification">notification</a>'s
<a>icon URL</a>, <a lt="url serializer">serialized</a>, and the empty string if
there is no <a lt="concept notification">notification</a>'s <a>icon URL</a>
otherwise.

<p>The <dfn attribute dfn-for=Notification><code>sound</code></dfn> attribute's
getter must return the <a lt="concept notification">notification</a>'s
<a>sound URL</a>, <a lt="url serializer">serialized</a>, and the empty string if
there is no <a lt="concept notification">notification</a>'s <a>sound URL</a>
otherwise.

<p>The <dfn attribute dfn-for=Notification><code>renotify</code></dfn>
attribute's getter must return the
<a lt="concept notification">notification</a>'s <a>renotify preference flag</a>.

<p>The <dfn attribute dfn-for=Notification><code>silent</code></dfn> attribute's
getter must return the <a lt="concept notification">notification</a>'s
<a>silent preference flag</a>.

<p>The <dfn attribute dfn-for=Notification><code>noscreen</code></dfn>
attribute's getter must return the
<a lt="concept notification">notification</a>'s
<a>screen off preference flag</a>.

<p>The <dfn attribute dfn-for=Notification><code>sticky</code></dfn> attribute's
getter must return the <a lt="concept notification">notification</a>'s
<a>sticky preference flag</a>.

<p>The <dfn attribute dfn-for=Notification><code>data</code></dfn> attribute's
getter must return a <a>structured clone</a> of
<a lt="concept notification">notification</a>'s <a>data</a>.


<h3 id=examples>Examples</h3>

<h4 id=using-events>Using events</h4>

<p>{{Notification}} objects dispatch events during their lifecycle, which
developers can use to generate desired behaviors.

<p>The <code>click</code> event dispatches when the user activates a
notification.

<pre class=example>
var not = new Notification("Gebrünn Gebrünn by Paul Kalkbrenner", { icon: "newsong.svg", tag: "song" })
notification.onclick = function() { displaySong(this) }</pre>


<h4 id=tags-example>Using the <code>tag</code> member for multiple instances</h4>

<p>Web applications frequently operate concurrently in multiple instances, such
as when a user opens a mail application in multiple browser tabs. Since the
desktop is a shared resource, the notifications API provides a way for these
instances to easily coordinate, by using the <code>tag</code> member.

<p>Notifications which represent the same conceptual event can be tagged in the
same way, and when both are shown, the user will only receive one notification.

<pre class=example>
Instance 1                                   | Instance 2
                                             |
// Instance notices there is new mail.       |
new Notification("New mail from John Doe",   |
                 { tag: 'message1' });       |
                                             |
                                             |  // Slightly later, this instance notices
                                             |  // there is new mail.
                                             |  new Notification("New mail from John Doe",
                                             |                   { tag: 'message1' });</pre>

<p>The result of this situation, if the user agent follows the algorithms here, is a
<strong>single</strong> notification "New mail from John Doe".


<h4 id=using-the-tag-member-for-a-single-instance>Using the <code>tag</code> member for a single instance</h4>

<p>The <code>tag</code> member can also be used by a single instance of an
application to keep its notifications as current as possible as state changes.

<p>For example, if Alice is using a chat application with Bob, and Bob sends
multiple messages while Alice is idle, the application may prefer that Alice not
see a desktop notification for each message.

<pre class=example>
// Bob says "Hi"
new Notification("Bob: Hi", { tag: 'chat_Bob' });

// Bob says "Are you free this afternoon?"
new Notification("Bob: Hi / Are you free this afternoon?", { tag: 'chat_Bob' });</pre>

<p>The result of this situation is a <i>single</i> notification; the second one
replaces the first having the same tag. In a platform that queues notifications
(first-in-first-out), using the tag allows the notification to also maintain its
position in the queue. Platforms where the newest notifications are shown first,
a similar result could be achieved using the {{close()!!method}} method.


<h2 id=service-worker-api>Service worker API</h2>

<pre class=idl>
dictionary GetNotificationOptions {
  DOMString tag = "";
};

partial interface ServiceWorkerRegistration {
  Promise&lt;void> showNotification(DOMString title, optional NotificationOptions options);
  Promise&lt;sequence&lt;Notification>> getNotifications(optional GetNotificationOptions filter);
};

[Constructor(DOMString type, optional NotificationEventInit eventInitDict),
 Exposed=ServiceWorker]
interface NotificationEvent : ExtendableEvent {
  readonly attribute Notification notification;
};

dictionary NotificationEventInit : ExtendableEventInit {
  required Notification notification;
};

partial interface ServiceWorkerGlobalScope {
  attribute EventHandler onnotificationclick;
};
</pre>

<p>The <dfn method dfn-for=ServiceWorkerRegistration><code>
showNotification(title, options)</code></dfn> method, when invoked, must run
these steps:

<ol>
  <li><p>Let <var>promise</var> be a new promise.

  <li><p>Let <var>notification</var> be the result of
  <a lt="create a notification">creating a notification</a> given
  <var>title</var> and <var>options</var>. Rethrow any exceptions.

  <li><p>If <a>context object</a>'s <a lt="dfn active worker">active worker</a>
  is null, reject <var>promise</var> with a <code>TypeError</code> exception.

  <li><p>Set <var>notification</var>'s <a>service worker registration</a> to the
  <a>context object</a>.

  <li><p>Run these substeps <a>in parallel</a>:

  <ol>
    <li><p>If <a>permission</a> for <var>notification</var>'s
    <a lt="concept origin">origin</a> is not "<code>granted</code>", reject
    <var>promise</var> with a <code>TypeError</code> exception, and terminate
    these substeps.

    <li><p>Otherwise, resolve <var>promise</var> with undefined.

    <li><p>Run the <a>fetch steps</a> for <var>notification</var>.

    <li><p>Run the <a>show steps</a> for <var>notification</var>.
  </ol>

  <li><p>Return <var>promise</var>.
</ol>

<p>The <dfn method dfn-for=ServiceWorkerRegistration><code>
getNotifications(filter)</code></dfn> method, when invoked, must run these
steps:

<ol>
  <li><p>Let <var>promise</var> be a new promise.

  <li><p>Run these substeps <a>in parallel</a>:

  <ol>
    <li><p>Let <var>tag</var> be <var>filter</var>'s <code>tag</code>.

    <li><p>Let <var>notifications</var> be a list of all
    <a lt="concept notification">notifications</a> in the
    <a>list of notifications</a> whose <a lt="concept origin">origin</a> is the
    <a>entry settings object</a>'s <a>origin</a>, whose
    <a>service worker registration</a> is the <a>context object</a>, and whose
    <a>tag</a>, if <var>tag</var> is not the empty string, is <var>tag</var>.

    <li><p>Let <var>objects</var> be an empty JavaScript array.

    <li><p>For each <a lt="concept notification">notification</a> in
    <var>notifications</var>, in creation order, create a new {{Notification}}
    object representing <a lt="concept notification">notification</a> and push
    that object to <var>objects</var>.

    <li><p>Resolve <var>promise</var> with <var>objects</var>.
  </ol>

  <li><p>Return <var>promise</var>.
</ol>

<p class=note>This method returns zero or more new {{Notification}} objects
which might represent the same underlying <a lt="concept notification">
notification</a> of {{Notification}} objects already in existence.

<hr>

<p>To <dfn>fire a service worker notification event named <var>e</var></dfn>
given <var>notification</var>,
<a lt="concept event fire">fire an event named <i>e</i></a> with an
<a lt="concept event">event</a> using the {{NotificationEvent}} interface whose
{{NotificationEvent/notification}} attribute is initialized to a new
{{Notification}} object representing <var>notification</var>.

<p>The {{NotificationEvent/notification}} attribute's getter must return the
value it was initialized to.

<p>The following is the <a>event handler</a> (and its corresponding
<a>event handler event type</a>) that must be supported as attribute by the
{{ServiceWorkerGlobalScope}} object:

<table>
  <thead>
    <tr>
      <th><a>event handler</a>
      <th><a>event handler event type</a>
  <tbody>
    <tr>
      <td><dfn attribute dfn-for=ServiceWorkerGlobalScope><code>
      onnotificationclick</code></dfn>
      <td><code>notificationclick
</table>


<h2 id=acknowledgments class=no-num>Acknowledgments</h2>

<p>Thanks to
Aharon (Vladimir) Lanin,
Alex Russell,
Arkadiusz Michalski,
Boris Zbarsky,
David Håsäther,
Doug Turner,
Drew Wilson,
Edward O'Connor,
Frederick Hirsch,
Ian Hickson,
Jake Archibald,
James Graham,
John Mellor,
Jon Lee,
Jonas Sicking,
Michael Cooper,
Michael Henretty,
Olli Pettay,
Peter Beverloo,
Reuben Morais, and
Simon Pieters
for being awesome.

<p>This standard is written by
<a lang=nl href=//annevankesteren.nl/>Anne van Kesteren</a>
(<a href=//www.mozilla.org/>Mozilla</a>,
<a href=mailto:annevk@annevk.nl>annevk@annevk.nl</a>). An earlier iteration was written
by John Gregg (<a href=//www.google.com/>Google</a>,
<a href=mailto:johnnyg@google.com>johnnyg@google.com</a>).

<p>Per <a rel="license" href="//creativecommons.org/publicdomain/zero/1.0/">CC0</a>, to
the extent possible under law, the editors have waived all copyright and related or
neighboring rights to this work.

<script>
document.addEventListener("DOMContentLoaded", function(event) {
  // no backrefs for index
  document.querySelector('.indexlist').classList.add('no-backref');

  // as bikeshed relocates script elements, add the script element for dfn.js
  // after document loads
  var script = document.createElement('script');
  script.setAttribute('id', 'head');
  script.setAttribute('src', 'https://resources.whatwg.org/dfn.js');
  document.body.appendChild(script);
});
</script>

<pre class="anchors">
urlPrefix: http://heycam.github.io/webidl/#dfn-; type: dfn
  text: throw
urlPrefix: https://html.spec.whatwg.org/multipage/
  urlPrefix: browsers.html; type: dfn
    text: browsing context
    text: origin
    text: same origin
  urlPrefix: browsers.html; type: interface
    text: Window
  urlPrefix: infrastructure.html; type: dfn
    text: in parallel
  urlPrefix: interaction.html; type: dfn
    text: dom window focus
    text: structured clone
  urlPrefix: webappapis.html; type: dfn
    text: entry settings object
    text: event handler event types
    text: event handlers
    text: global object
    text: queue a task
    text: report the exception
  urlPrefix: webappapis.html; type: interface
    text: EventHandler
urlPrefix: https://url.spec.whatwg.org/#concept-; type: dfn
  text: url parser
  text: url serializer
urlPrefix: https://fetch.spec.whatwg.org/#concept-; type: dfn
  text: fetch
  text: internal response
  text: response
  text: response type
urlPrefix: https://slightlyoff.github.io/ServiceWorker/spec/service_worker/; type: dfn
  text: handle functional event
  text: dfn active worker
urlPrefix: https://slightlyoff.github.io/ServiceWorker/spec/service_worker/; type: interface
  text: ExtendableEvent
  text: ExtendableEventInit
  text: ServiceWorker
  text: ServiceWorkerGlobalScope
  text: ServiceWorkerRegistration
urlPrefix: https://dom.spec.whatwg.org/; type: dfn
  text: canceled flag
  text: concept event
  text: concept event fire
  text: concept event listener
  text: context object
  text: dom event cancelable
urlPrefix: https://dom.spec.whatwg.org/; type: interface
  text: EventTarget
urlPrefix: http://www.w3.org/TR/vibration/
  urlPrefix: #dfn-; type: dfn
    text: perform vibration
    text: validate and normalize
  urlPrefix: #idl-def-; type: interface
    text: VibratePattern
</pre>

<pre class="biblio">
{
    "DOM": {
        "authors": [
            "Anne van Kesteren",
            "Aryeh Gregor",
            "Ms2ger"
        ],
        "href": "https://dom.spec.whatwg.org/",
        "title": "DOM",
        "publisher": "WHATWG"
    },
    "WEBIDL": {
        "authors": [
            "Cameron McCormack",
            "Jonas Sicking"
        ],
        "href": "http://heycam.github.io/webidl/",
        "title": "Web IDL",
        "publisher": "W3C"
    },
    "URL": {
        "authors": [
            "Anne van Kesteren",
            "Sam Ruby"
        ],
        "href": "https://url.spec.whatwg.org/",
        "title": "URL",
        "publisher": "WHATWG"
    },
    "LANG": {
        "authors": [
            "Addison Phillips",
            "Mark Davis"
        ],
        "href": "http://tools.ietf.org/html/bcp47",
        "title": "Tags for Identifying Languages; Matching of Language Tags",
        "publisher": "IETF"
    }
}
</pre>
